using MediatR;
using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Description;
using {{ rootNamespacename }}.Features.Core;

namespace {{ namespacename }}
{
    [Authorize]
    [RoutePrefix("api/{{ entityNameCamelCase }}s")]
    public class {{ entityNamePascalCase }}Controller : ApiController
    {
        public {{ entityNamePascalCase }}Controller(IMediator mediator)
        {
            _mediator = mediator;
        }

        [Route("add")]
        [HttpPost]
        [ResponseType(typeof(AddOrUpdate{{ entityNamePascalCase }}Command.Response))]
        public async Task<IHttpActionResult> Add(AddOrUpdate{{ entityNamePascalCase }}Command.Request request)
        {
            request.TenantUniqueId = Request.GetTenantUniqueId();
            return Ok(await _mediator.Send(request));
        }

        [Route("update")]
        [HttpPut]
        [ResponseType(typeof(AddOrUpdate{{ entityNamePascalCase }}Command.Response))]
        public async Task<IHttpActionResult> Update(AddOrUpdate{{ entityNamePascalCase }}Command.Request request)
        {
            request.TenantUniqueId = Request.GetTenantUniqueId();
            return Ok(await _mediator.Send(request));
        }
        
        [Route("get")]
        [AllowAnonymous]
        [HttpGet]
        [ResponseType(typeof(Get{{ entityNamePascalCase }}sQuery.Response))]
        public async Task<IHttpActionResult> Get()
        {
            var request = new Get{{ entityNamePascalCase }}sQuery.Request();
            request.TenantUniqueId = Request.GetTenantUniqueId();
            return Ok(await _mediator.Send(request));
        }

        [Route("getById")]
        [HttpGet]
        [ResponseType(typeof(Get{{ entityNamePascalCase }}ByIdQuery.Response))]
        public async Task<IHttpActionResult> GetById([FromUri]Get{{ entityNamePascalCase }}ByIdQuery.Request request)
        {
            request.TenantUniqueId = Request.GetTenantUniqueId();
            return Ok(await _mediator.Send(request));
        }

        [Route("remove")]
        [HttpDelete]
        [ResponseType(typeof(Remove{{ entityNamePascalCase }}Command.Response))]
        public async Task<IHttpActionResult> Remove([FromUri]Remove{{ entityNamePascalCase }}Command.Request request)
        {
            request.TenantUniqueId = Request.GetTenantUniqueId();
            return Ok(await _mediator.Send(request));
        }

        protected readonly IMediator _mediator;
    }
}