using MediatR;
using {{ rootNamespacename }}.Data;
using {{ rootNamespacename }}.Data.Model;
using {{ rootNamespacename }}.Features.Core;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System.Data.Entity;

namespace {{ namespacename }}
{
    public class {{ namePascalCase }}Command
    {
        public class {{ namePascalCase }}Request : IRequest<{{ namePascalCase }}Response>
        {
            public {{ entityNamePascalCase }}ApiModel {{ entityNamePascalCase }} { get; set; }
			public int? TenantId { get; set; }
        }

        public class {{ namePascalCase }}Response { }

        public class {{ namePascalCase }}Handler : IAsyncRequestHandler<{{ namePascalCase }}Request, {{ namePascalCase }}Response>
        {
            public {{ namePascalCase }}Handler({{ rootNamespacename }}Context context, ICache cache)
            {
                _context = context;
                _cache = cache;
            }

            public async Task<{{ namePascalCase }}Response> Handle({{ namePascalCase }}Request request)
            {
                var entity = await _context.{{ entityNamePascalCase }}s
                    .SingleOrDefaultAsync(x => x.Id == request.{{ entityNamePascalCase }}.Id && x.TenantId == request.TenantId);
                if (entity == null) _context.{{ entityNamePascalCase }}s.Add(entity = new {{ entityNamePascalCase }}());
                entity.Name = request.{{ entityNamePascalCase }}.Name;
				entity.TenantId = request.TenantId;

                await _context.SaveChangesAsync();

                return new {{ namePascalCase }}Response();
            }

            private readonly {{ rootNamespacename }}Context _context;
            private readonly ICache _cache;
        }

    }

}
