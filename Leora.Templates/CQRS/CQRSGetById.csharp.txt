using MediatR;
using {{ rootNamespacename }}.Data;
using {{ rootNamespacename }}.Utilities;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System.Data.Entity;

namespace {{ namespacename }}
{
    public class {{ namePascalCase }}Query
    {
        public class {{ namePascalCase }}Request : IRequest<{{ namePascalCase }}Response> { 
			public int Id { get; set; }
		}

        public class {{ namePascalCase }}Response
        {
            public {{ entityNamePascalCase }}ApiModel {{ entityNamePascalCase }} { get; set; } 
		}

        public class {{ namePascalCase }}Handler : IAsyncRequestHandler<{{ namePascalCase }}Request, {{ namePascalCase }}Response>
        {
            public {{ namePascalCase }}Handler(QuinntyneBrownPhotographyDataContext dataContext, ICache cache)
            {
                _dataContext = dataContext;
                _cache = cache;
            }

            public async Task<{{ namePascalCase }}Response> Handle({{ namePascalCase }}Request request)
            {                
                return new {{ namePascalCase }}Response()
                {
                    {{ entityNamePascalCase }} = {{ entityNamePascalCase }}ApiModel.From{{ entityNamePascalCase }}(await _dataContext.{{ entityNamePascalCase }}s.FindAsync(request.Id))
                };
            }

            private readonly QuinntyneBrownPhotographyDataContext _dataContext;
            private readonly ICache _cache;
        }

    }

}
