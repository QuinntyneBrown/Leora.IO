using MediatR;
using {{ rootNamespacename }}.Data;
using {{ rootNamespacename }}.Data.Model;
using {{ rootNamespacename }}.Features.Core;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System.Data.Entity;

namespace {{ namespacename }}
{
    public class {{ namePascalCase }}Command
    {
        public class Request : IRequest<Response>
        {
            public int Id { get; set; }
            public Guid TenantUniqueId { get; set; } 
        }

        public class Response { }

        public class Handler : IAsyncRequestHandler<Request, Response>
        {
            public Handler({{ rootNamespacename }}Context context, ICache cache)
            {
                _context = context;
                _cache = cache;
            }

            public async Task<Response> Handle(Request request)
            {
                var {{ entityNameCamelCase }} = await _context.{{ entityNamePascalCase }}s.SingleAsync(x=>x.Id == request.Id && x.Tenant.UniqueId == request.TenantUniqueId);
                {{ entityNameCamelCase }}.IsDeleted = true;
                await _context.SaveChangesAsync();
                return new Response();
            }

            private readonly {{ rootNamespacename }}Context _context;
            private readonly ICache _cache;
        }
    }
}