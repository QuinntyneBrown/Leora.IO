using MediatR;
using {{ rootNamespacename }}.Data;
using {{ rootNamespacename }}.Data.Models;
using {{ rootNamespacename }}.Features.Core;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System.Data.Entity;

namespace {{ namespacename }}
{
    public class {{ namePascalCase }}Command
    {
        public class {{ namePascalCase }}Request : IRequest<{{ namePascalCase }}Response>
        {
            public int Id { get; set; }
        }

        public class {{ namePascalCase }}Response { }

        public class {{ namePascalCase }}Handler : IAsyncRequestHandler<{{ namePascalCase }}Request, {{ namePascalCase }}Response>
        {
            public {{ namePascalCase }}Handler(DataContext dataContext, ICache cache)
            {
                _dataContext = dataContext;
                _cache = cache;
            }

            public async Task<{{ namePascalCase }}Response> Handle({{ namePascalCase }}Request request)
            {
                var {{ entityNameCamelCase }} = await _dataContext.{{ entityNamePascalCase }}s.FindAsync(request.Id);
                {{ entityNameCamelCase }}.IsDeleted = true;
                await _dataContext.SaveChangesAsync();
                return new Remove{{ entityNamePascalCase }}Response();
            }

            private readonly DataContext _dataContext;
            private readonly ICache _cache;
        }
    }
}
