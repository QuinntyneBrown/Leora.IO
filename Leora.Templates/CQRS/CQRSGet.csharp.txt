using MediatR;
using {{ rootNamespacename }}.Data;
using {{ rootNamespacename }}.Utilities;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System.Data.Entity;

namespace {{ namespacename }}
{
    public class {{ namePascalCase }}Query
    {
        public class {{ namePascalCase }}Request : IAsyncRequest<{{ namePascalCase }}Response> { }

        public class {{ namePascalCase }}Response
        {
            public ICollection<{{ entityNamePascalCase }}ApiModel> {{ entityNamePascalCase }}s { get; set; } = new HashSet<{{ entityNamePascalCase }}ApiModel>();
        }

        public class {{ namePascalCase }}Handler : IAsyncRequestHandler<{{ namePascalCase }}Request, {{ namePascalCase }}Response>
        {
            public {{ namePascalCase }}Handler(QuinntyneBrownPhotographyDataContext dataContext, ICache cache)
            {
                _dataContext = dataContext;
                _cache = cache;
            }

            public async Task<{{ namePascalCase }}Response> Handle({{ namePascalCase }}Request request)
            {
                var {{ entityNameCamelCase }}s = await _dataContext.{{ entityNamePascalCase }}s.ToListAsync();
                return new Get{{ entityNamePascalCase }}sResponse()
                {
                    {{ entityNamePascalCase }}s = {{ entityNameCamelCase }}s.Select(x => {{ entityNamePascalCase }}ApiModel.From{{ entityNamePascalCase }}(x)).ToList()
                };
            }

            private readonly QuinntyneBrownPhotographyDataContext _dataContext;
            private readonly ICache _cache;
        }

    }

}
