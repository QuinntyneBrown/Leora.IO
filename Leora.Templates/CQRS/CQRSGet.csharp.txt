using MediatR;
using {{ rootNamespacename }}.Data;
using {{ rootNamespacename }}.Features.Core;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System.Data.Entity;

namespace {{ namespacename }}
{
    public class {{ namePascalCase }}Query
    {
        public class {{ namePascalCase }}Request : IRequest<{{ namePascalCase }}Response> { 
            public int? TenantId { get; set; }		
		}

        public class {{ namePascalCase }}Response
        {
            public ICollection<{{ entityNamePascalCase }}ApiModel> {{ entityNamePascalCase }}s { get; set; } = new HashSet<{{ entityNamePascalCase }}ApiModel>();
        }

        public class {{ namePascalCase }}Handler : IAsyncRequestHandler<{{ namePascalCase }}Request, {{ namePascalCase }}Response>
        {
            public {{ namePascalCase }}Handler({{ rootNamespacename }}Context context, ICache cache)
            {
                _context = context;
                _cache = cache;
            }

            public async Task<{{ namePascalCase }}Response> Handle({{ namePascalCase }}Request request)
            {
                var {{ entityNameCamelCase }}s = await _context.{{ entityNamePascalCase }}s
				    .Where( x => x.TenantId == request.TenantId )
                    .ToListAsync();

                return new Get{{ entityNamePascalCase }}sResponse()
                {
                    {{ entityNamePascalCase }}s = {{ entityNameCamelCase }}s.Select(x => {{ entityNamePascalCase }}ApiModel.From{{ entityNamePascalCase }}(x)).ToList()
                };
            }

            private readonly {{ rootNamespacename }}Context _context;
            private readonly ICache _cache;
        }

    }

}
