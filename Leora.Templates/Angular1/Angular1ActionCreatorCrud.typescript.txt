import { IDispatcher, BaseActionCreator, Service } from "../core";
import { ModalActionCreator } from "../modal/modal.actions";

@Service({
    serviceName: "{{ entityNameCamelCase }}ActionCreator",
    viewProviders: ["$location", "dispatcher", "{{ entityNameCamelCase }}Service", "guid", "invokeAsync","modalActionCreator"]
})
export class {{ entityNamePascalCase }}ActionCreator extends BaseActionCreator {
    constructor($location: angular.ILocationService, dispatcher: IDispatcher, {{ entityNameCamelCase }}Service, guid, private invokeAsync, private modalActionCreator: ModalActionCreator) {
        super($location,{{ entityNameCamelCase }}Service,dispatcher,guid,AddOrUpdate{{ entityNamePascalCase }}Action,All{{ entityNamePascalCase }}sAction,Remove{{ entityNamePascalCase }}Action,SetCurrent{{ entityNamePascalCase }}Action)
    }    

	addOrUpdateSuccess = options => this.dispatcher.dispatch(new AddOrUpdate{{ entityNamePascalCase }}SuccessAction(options.entity));

    current{{ entityNamePascalCase }}Removed = () => this.dispatcher.dispatch(new Current{{ entityNamePascalCase }}RemovedAction());

    openAll{{ entityNamePascalCase }}sModal = () => {
        this.invokeAsync(this.all).then(results => {
            this.modalActionCreator.open({ html: "<all-{{ entityNameSnakeCase }}-modal></all-{{ entityNameSnakeCase }}-modal>" });
        });
    }
}


export class AddOrUpdate{{ entityNamePascalCase }}Action { constructor(public id, public entity) { } }

export class All{{ entityNamePascalCase }}sAction { constructor(public id, public entities) { } }

export class Remove{{ entityNamePascalCase }}Action { constructor(public id, public entity) { } }

export class {{ entityNamePascalCase }}sFilterAction { constructor(public id, public term) { } }

export class SetCurrent{{ entityNamePascalCase }}Action { constructor(public entity) { } }

export class AddOrUpdate{{ entityNamePascalCase }}SuccessAction { constructor(public entity) { } }

export class Current{{ entityNamePascalCase }}RemovedAction { constructor() { } }
