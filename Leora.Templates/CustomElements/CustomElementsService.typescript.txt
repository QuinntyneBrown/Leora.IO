import { fetch } from "../utilities";
import { {{ entityNamePascalCase }} } from "./{{ entityNameSnakeCase }}.model";
import { environment } from "../environment";

export class {{ entityNamePascalCase }}Service {
    constructor(private _fetch = fetch) { }

    private static _instance: {{ entityNamePascalCase }}Service;

    public static get Instance() {
        this._instance = this._instance || new {{ entityNamePascalCase }}Service();
        return this._instance;
    }

    public get(): Promise<Array<{{ entityNamePascalCase }}>> {
        return this._fetch({ url: `${environment.baseUrl}api/{{ entityNameLowerCase }}/get`, authRequired: true }).then((results:string) => {
            return (JSON.parse(results) as { {{ entityNameCamelCase }}s: Array<{{ entityNamePascalCase }}> }).{{ entityNameCamelCase }}s;
        });
    }

    public getById(id): Promise<{{ entityNamePascalCase }}> {
        return this._fetch({ url: `${environment.baseUrl}api/{{ entityNameLowerCase }}/getbyid?id=${id}`, authRequired: true }).then((results:string) => {
            return (JSON.parse(results) as { {{ entityNameCamelCase }}: {{ entityNamePascalCase }} }).{{ entityNameCamelCase }};
        });
    }

    public add({{ entityNameCamelCase }}) {
        return this._fetch({ url: `${environment.baseUrl}api/{{ entityNameLowerCase }}/add`, method: `POST`, data: { {{ entityNameCamelCase }} }, authRequired: true  });
    }

    public remove(options: { id : number }) {
        return this._fetch({ url: `${environment.baseUrl}api/{{ entityNameLowerCase }}/remove?id=${options.id}`, method: `DELETE`, authRequired: true  });
    }
    
}