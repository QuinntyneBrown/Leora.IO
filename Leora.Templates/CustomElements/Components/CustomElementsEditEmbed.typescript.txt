import { {{ entityNamePascalCase }} } from "./{{ entityNameSnakeCase }}.model";
import { EditorComponent } from "../shared";

const template = require("./{{ entityNameSnakeCase }}-edit-embed.component.html");
const styles = require("./{{ entityNameSnakeCase }}-edit-embed.component.scss");

export class {{ entityNamePascalCase }}EditEmbedComponent extends HTMLElement {
    constructor() {
        super();
		this.onSave = this.onSave.bind(this);
        this.onDelete = this.onDelete.bind(this);
    }

    static get observedAttributes() {
        return [
			"{{ entityNameSnakeCase }}"
		];
    }
    
    connectedCallback() {        
        this.innerHTML = `<style>${styles}</style> ${template}`; 
		this._bind();
		this._setEventListeners();
    }
    
	private async _bind() {
        this._titleElement.textContent = this.{{ entityNameCamelCase }} ? "Edit {{ entityNameTitleCase }}": "Create {{ entityNameTitleCase }}";

        if (this.{{ entityNameCamelCase }}) {                
			this._nameInputElement.value = this.{{ entityNameCamelCase }}.name;  
        } else {
            this._deleteButtonElement.style.display = "none";
        } 	
	}

	private _setEventListeners() {
        this._saveButtonElement.addEventListener("click", this.onSave);
		this._deleteButtonElement.addEventListener("click", this.onDelete);
    }

    private disconnectedCallback() {
        this._saveButtonElement.removeEventListener("click", this.onSave);
		this._deleteButtonElement.removeEventListener("click", this.onDelete);
    }

    public async onSave() {
        const {{ entityNameCamelCase }} = {
            id: this.{{ entityNameCamelCase }} != null ? this.{{ entityNameCamelCase }}.id : null,
            name: this._nameInputElement.value
        } as {{ entityNamePascalCase }};       
    }

    public async onDelete() {        

    }

    attributeChangedCallback(name, oldValue, newValue) {
        switch (name) {
            case "{{ entityNameSnakeCase }}":
                this.{{ entityNameCamelCase }} = JSON.parse(newValue);
				break;
        }        
    }

    public {{ entityNameCamelCase }}: {{ entityNamePascalCase }};
    
	private get _titleElement(): HTMLElement { return this.querySelector("h2") as HTMLElement; }
    private get _saveButtonElement(): HTMLElement { return this.querySelector(".save-button") as HTMLElement };
    private get _deleteButtonElement(): HTMLElement { return this.querySelector(".delete-button") as HTMLElement };
    private get _nameInputElement(): HTMLInputElement { return this.querySelector(".{{ entityNameSnakeCase }}-name") as HTMLInputElement;}
}

customElements.define(`ce-{{ entityNameSnakeCase }}-edit-embed`,{{ entityNamePascalCase }}EditEmbedComponent);
