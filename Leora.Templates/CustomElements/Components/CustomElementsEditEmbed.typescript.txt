import { {{ entityNamePascalCase }} } from "./{{ entityNameSnakeCase }}.model";
import { EditorComponent } from "../shared";
import {  {{ entityNamePascalCase }}Delete, {{ entityNamePascalCase }}Edit, {{ entityNamePascalCase }}Add } from "./{{ entityNameSnakeCase }}.actions";

const template = require("./{{ entityNameSnakeCase }}-edit-embed.component.html");
const styles = require("./{{ entityNameSnakeCase }}-edit-embed.component.scss");

export class {{ entityNamePascalCase }}EditEmbedComponent extends HTMLElement {
    constructor() {
        super();
        this.onSave = this.onSave.bind(this);
        this.onDelete = this.onDelete.bind(this);
        this.onCreate = this.onCreate.bind(this);
    }

    static get observedAttributes() {
        return [
            "{{ entityNameSnakeCase }}",
            "{{ entityNameSnakeCase }}-id"
        ];
    }
    
    connectedCallback() {        
        this.innerHTML = `<style>${styles}</style> ${template}`; 
        this._bind();
        this._setEventListeners();
    }
    
    private async _bind() {
        this._titleElement.textContent = this.{{ entityNameCamelCase }} ? "Edit {{ entityNameTitleCase }}": "Create {{ entityNameTitleCase }}";

        if (this.{{ entityNameCamelCase }}) {                
            this._nameInputElement.value = this.{{ entityNameCamelCase }}.name;  
        } else {
            this._deleteButtonElement.style.display = "none";
        }     
    }

    private _setEventListeners() {
        this._saveButtonElement.addEventListener("click", this.onSave);
        this._deleteButtonElement.addEventListener("click", this.onDelete);
        this._createButtonElement.addEventListener("click", this.onCreate);
    }

    private disconnectedCallback() {
        this._saveButtonElement.removeEventListener("click", this.onSave);
        this._deleteButtonElement.removeEventListener("click", this.onDelete);
        this._createButtonElement.removeEventListener("click", this.onCreate);
    }

    public onSave() {
        const {{ entityNameCamelCase }} = {
            id: this.{{ entityNameCamelCase }} != null ? this.{{ entityNameCamelCase }}.id : null,
            name: this._nameInputElement.value
        } as {{ entityNamePascalCase }};
        
        this.dispatchEvent(new {{ entityNamePascalCase }}Add({{ entityNameCamelCase }}));            
    }

    public onCreate() {        
        this.dispatchEvent(new {{ entityNamePascalCase }}Edit(new {{ entityNamePascalCase }}()));            
    }

    public onDelete() {        
        const {{ entityNameCamelCase }} = {
            id: this.{{ entityNameCamelCase }} != null ? this.{{ entityNameCamelCase }}.id : null,
            name: this._nameInputElement.value
        } as {{ entityNamePascalCase }};

        this.dispatchEvent(new {{ entityNamePascalCase }}Delete({{ entityNameCamelCase }}));         
    }

    attributeChangedCallback(name, oldValue, newValue) {
        switch (name) {
            case "{{ entityNameSnakeCase }}-id":
                this.{{ entityNameCamelCase }}Id = newValue;
                break;
            case "{{ entityNameCamelCase }}":
                this.{{ entityNameCamelCase }} = JSON.parse(newValue);
                if (this.parentNode) {
                    this.{{ entityNameCamelCase }}Id = this.{{ entityNameCamelCase }}.id;
                    this._nameInputElement.value = this.{{ entityNameCamelCase }}.name != undefined ? this.{{ entityNameCamelCase }}.name : "";
                    this._titleElement.textContent = this.{{ entityNameCamelCase }}Id ? "Edit {{ entityNamePascalCase }}" : "Create {{ entityNamePascalCase }}";
                }
                break;
        }           
    }

    public {{ entityNameCamelCase }}Id: any;
    
	public {{ entityNameCamelCase }}: {{ entityNamePascalCase }};
    
    private get _createButtonElement(): HTMLElement { return this.querySelector(".{{ entityNameSnakeCase }}-create") as HTMLElement; }
    
	private get _titleElement(): HTMLElement { return this.querySelector("h2") as HTMLElement; }
    
	private get _saveButtonElement(): HTMLElement { return this.querySelector(".save-button") as HTMLElement };
    
	private get _deleteButtonElement(): HTMLElement { return this.querySelector(".delete-button") as HTMLElement };
    
	private get _nameInputElement(): HTMLInputElement { return this.querySelector(".{{ entityNameSnakeCase }}-name") as HTMLInputElement;}
}

customElements.define(`ce-{{ entityNameSnakeCase }}-edit-embed`,{{ entityNamePascalCase }}EditEmbedComponent);
