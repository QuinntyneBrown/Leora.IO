using {{ name }}.Dtos;
using {{ name }}.Services;
using System.Collections.Generic;
using System.Web.Http;
using System.Web.Http.Description;

namespace {{ name }}.Controllers
{
    [Authorize]
    [RoutePrefix("api/{{ entityNameCamelCase }}")]
    public class {{ entity }}Controller : ApiController
    {
        public {{ entity }}Controller(I{{ entity }}Service {{ entityNameCamelCase }}Service)
        {
            _{{ entityNameCamelCase }}Service = {{ entityNameCamelCase }}Service;
        }

        [Route("add")]
        [HttpPost]
        [ResponseType(typeof({{ entity }}AddOrUpdateResponseDto))]
        public IHttpActionResult Add({{ entity }}AddOrUpdateRequestDto dto) { return Ok(_{{ entityNameCamelCase }}Service.AddOrUpdate(dto)); }

        [Route("update")]
        [HttpPut]
        [ResponseType(typeof({{ entity }}AddOrUpdateResponseDto))]
        public IHttpActionResult Update({{ entity }}AddOrUpdateRequestDto dto) { return Ok(_{{ entityNameCamelCase }}Service.AddOrUpdate(dto)); }

        [Route("get")]
        [AllowAnonymous]
        [HttpGet]
        [ResponseType(typeof(ICollection<{{ entity }}Dto>))]
        public IHttpActionResult Get() { return Ok(_{{ entityNameCamelCase }}Service.Get()); }

        [Route("getById")]
        [HttpGet]
        [ResponseType(typeof({{ entity }}Dto))]
        public IHttpActionResult GetById(int id) { return Ok(_{{ entityNameCamelCase }}Service.GetById(id)); }

        [Route("remove")]
        [HttpDelete]
        [ResponseType(typeof(int))]
        public IHttpActionResult Remove(int id) { return Ok(_{{ entityNameCamelCase }}Service.Remove(id)); }

        protected readonly I{{ entity }}Service _{{ entityNameCamelCase }}Service;


    }
}
