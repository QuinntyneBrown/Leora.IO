using MediatR;
using System.Threading.Tasks;
using System.Threading;
using System.Data;
using Dapper;
using System;
using {{ rootNamespacename }}.Infrastructure.Services;
using {{ rootNamespacename }}.Core.Entities;
using {{ rootNamespacename }}.Infrastructure.Data;
using FluentValidation;

namespace {{ namespacename }}
{
    public class {{ namePascalCase }}Command
    {
        public class Validator: AbstractValidator<Request> {
            public Validator()
            {
                RuleFor(request => request.{{ entityNamePascalCase }}.Code).NotNull();
            }
        }

        public class Request : IRequest<Response> {
            public {{ entityNamePascalCase }}ApiModel {{ entityNamePascalCase }} { get; set; }
        }

        public class Response
        {			
            public int {{ entityNamePascalCase }}Id { get; set; }
        }

        public class Handler : IRequestHandler<Request, Response>
        {
            private readonly IAggregateVersionManager _aggregateVersionManager;
            private readonly ISqlConnectionManager _sqlConnectionManager;
            public Handler(IAggregateVersionManager aggregateVersionManager, ISqlConnectionManager sqlConnectionManager)
            {
                _aggregateVersionManager = aggregateVersionManager;
                _sqlConnectionManager = sqlConnectionManager;
            }

            public async Task<Response> Handle(Request request, CancellationToken cancellationToken)
            {
                Concurrency concurrency = default(Concurrency);

                try
                {
                    using (var connection = _sqlConnectionManager.GetConnection())
                    {
                        concurrency = _aggregateVersionManager.Reserve("{{ entityNamePascalCase }}", request.{{ entityNamePascalCase }}.{{ entityNamePascalCase }}Id, request.{{ entityNamePascalCase }}.ConcurrencyVersion);

                        var dynamicParameters = new DynamicParameters();

                        dynamicParameters.AddDynamicParams(new
                        {
                            request.{{ entityNamePascalCase }}.{{ entityNamePascalCase }}Id,
                            request.{{ entityNamePascalCase }}.Code
                        });

                        var parameterDirection = request.{{ entityNamePascalCase }}.{{ entityNamePascalCase }}Id == 0 ? ParameterDirection.Output : ParameterDirection.InputOutput;

                        dynamicParameters.Add("{{ entityNamePascalCase }}Id",  request.{{ entityNamePascalCase }}.{{ entityNamePascalCase }}Id, DbType.Int16, parameterDirection);
                        
                        await connection.ExecuteAsync("[Common].[Proc{{ entityNamePascalCase }}Save]", dynamicParameters, commandType: CommandType.StoredProcedure);

                        concurrency.Id = dynamicParameters.Get<short>("@{{ entityNamePascalCase }}Id");

                        await _aggregateVersionManager.Save(concurrency);

                        return new Response()
                        {
                            {{ entityNamePascalCase }}Id = dynamicParameters.Get<short>("@{{ entityNamePascalCase }}Id")
                        };
                    }

                }
                catch (Exception exception)
                {
                    if(concurrency != default(Concurrency))
                        _aggregateVersionManager.CancelReservation(concurrency);

                    throw exception;
                }
            }

        }
    }
}
