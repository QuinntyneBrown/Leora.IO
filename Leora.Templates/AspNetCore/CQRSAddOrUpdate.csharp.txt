using MediatR;
using {{ rootNamespacename }}.Data;
using {{ rootNamespacename }}.Features.Core;
using {{ rootNamespacename }}.Model;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;
using System.Threading;
using Microsoft.EntityFrameworkCore;

namespace {{ namespacename }}
{
    public class {{ namePascalCase }}Command
    {
        public class Request : BaseAuthenticatedRequest, IRequest<Response>
        {            
            public {{ entityNamePascalCase }}ApiModel {{ entityNamePascalCase }} { get; set; }
        }

        public class Response
        {            
            public int {{ entityNamePascalCase }}Id { get; set; }
        }

        public class Handler : IRequestHandler<Request, Response>
        {
            public Handler(I{{ rootNamespacename }}Context context, ICache cache)
            {
                _context = context;
                _cache = cache;
            }

            public async Task<Response> Handle(Request request, CancellationToken cancellationToken)
            {
                var {{ entityNameCamelCase }} = await _context.{{ entityNamePascalCase }}s
                    .SingleOrDefaultAsync(x => x.{{ entityNamePascalCase }}Id == request.{{ entityNamePascalCase }}.{{ entityNamePascalCase }}Id);
                
                if ({{ entityNameCamelCase }} == null)
                    _context.{{ entityNamePascalCase }}s.Add({{ entityNameCamelCase }} = new {{ entityNamePascalCase }}());

                {{ entityNameCamelCase }}.Name = request.{{ entityNamePascalCase }}.Name;
                
                await _context.SaveChangesAsync(cancellationToken, request.Username);

                return new Response() { {{ entityNamePascalCase }}Id = {{ entityNameCamelCase }}.{{ entityNamePascalCase }}Id };
            }

            private readonly I{{ rootNamespacename }}Context _context;
            private readonly ICache _cache;
        }

    }

}
