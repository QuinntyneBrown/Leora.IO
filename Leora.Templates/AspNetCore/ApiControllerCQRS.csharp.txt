using MediatR;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace {{ namespacename }}
{
    [Authorize]
    [Route("api/{{ entityNameLowerCase }}s")]
    public class {{ entityNamePascalCase }}sController : Controller
    {
        private readonly IMediator _mediator;

        public {{ entityNamePascalCase }}sController(IMediator mediator)
        {
            _mediator = mediator;
        }
        [Route("add")]
        [HttpPost]
        public async Task<IActionResult> Add([FromBody]AddOrUpdate{{ entityNamePascalCase }}Command.Request request)
            => Ok(await _mediator.Send(request));
        
        [Route("update")]
        [HttpPut]
        public async Task<IActionResult> Update([FromBody]AddOrUpdate{{ entityNamePascalCase }}Command.Request request)
            => Ok(await _mediator.Send(request));
        
        [Route("get")]
        [HttpGet]
        public async Task<IActionResult> Get()
            => Ok(await _mediator.Send(new Get{{ entityNamePascalCase }}sQuery.Request()));

        [Route("getById")]
        [HttpGet]
        public async Task<IActionResult> GetById([FromQuery]Get{{ entityNamePascalCase }}ByIdQuery.Request request)
            => Ok(await _mediator.Send(request));

        [Route("remove")]
        [HttpDelete]
        public async Task<IActionResult> Remove([FromQuery]Remove{{ entityNamePascalCase }}Command.Request request) {
            await _mediator.Send(request);
            return Ok();
        }
    }
}
