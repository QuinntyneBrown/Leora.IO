using {{ rootNamespacename }}.Features.Core;
using {{ rootNamespacename }}.Data;
using Dapper;
using MediatR;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using System.Data;

namespace {{ namespacename }}
{
    public class {{ namePascalCase }}Command
    {
        public class Request : BaseRequest, IRequest { 
            public {{ entityNamePascalCase }}ApiModel {{ entityNamePascalCase }} { get; set; }		
		}

        public class Handler : IRequestHandler<Request>
        {
            private readonly ISqlConnectionManager _sqlConnectionManager;

            public Handler(ISqlConnectionManager sqlConnectionManager)
            {
                _sqlConnectionManager = sqlConnectionManager;
            }

            public async Task Handle(Request request, CancellationToken cancellationToken)
            {   
			    int result;

                using (var sqlConnection = _sqlConnectionManager.GetConnection())
                {
                    var dynamicParameters = new DynamicParameters();

                    dynamicParameters.AddDynamicParams(request.{{ entityNamePascalCase }});

                    await sqlConnection.OpenAsync();

                    result = await sqlConnection.ExecuteAsync(Constants.PROC_{{ entityNameAllCaps }}, dynamicParameters,  commandType: CommandType.StoredProcedure);

                    sqlConnection.Close();
                }
            }
        }
    }
}