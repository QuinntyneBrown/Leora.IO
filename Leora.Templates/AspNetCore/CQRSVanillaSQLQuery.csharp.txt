using {{ rootNamespacename }}.Infrastructure.Data;
using Dapper;
using MediatR;
using System.Threading.Tasks;
using System.Threading;
using System.Data;

namespace {{ namespacename }}
{
    public class {{ namePascalCase }}Query
    {
        public class Request : IRequest<Response>
        {
            public int {{ entityNamePascalCase }}Id { get; set; }
        }

        public class Response
        {
            public {{ entityNamePascalCase }}ApiModel Tax { get; set; }
        }

        public class Handler : IRequestHandler<Request, Response>
        {
            private readonly ISqlConnectionManager _sqlConnectionManager;

            public Handler(ISqlConnectionManager sqlConnectionManager)
            {
                _sqlConnectionManager = sqlConnectionManager;
            }

            public async Task<Response> Handle(Request request, CancellationToken cancellationToken)
            {
                using (var connection = _sqlConnectionManager.GetConnection())
                {
                    return new Response()
                    {
                        {{ entityNamePascalCase }} = await connection.QuerySingleAsync<{{ entityNamePascalCase }}ApiModel>("[Common].[Proc{{ entityNamePascalCase }}Get]", new { request.{{ entityNamePascalCase }}Id }, commandType: CommandType.StoredProcedure)
                    };
                }
            }
        }
    }
}
