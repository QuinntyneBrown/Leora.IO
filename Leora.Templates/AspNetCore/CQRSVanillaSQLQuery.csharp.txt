using {{ rootNamespacename }}.Features.Core;
using {{ rootNamespacename }}.Data;
using Dapper;
using MediatR;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Threading;
using System.Data;

namespace {{ namespacename }}
{
    public class {{ namePascalCase }}Query
    {
        public class Request : BaseRequest, IRequest<Response> { }

        public class Response
        {			
            public IEnumerable<{{ entityNamePascalCase }}ApiModel> {{ entityNamePascalCase }}s { get; set; } = new HashSet<{{ entityNamePascalCase }}ApiModel>();
        }

        public class Handler : IRequestHandler<Request, Response>
        {
            private readonly ISqlConnectionManager _sqlConnectionManager;

            public Handler(ISqlConnectionManager sqlConnectionManager)
            {
                _sqlConnectionManager = sqlConnectionManager;
            }

            public async Task<Response> Handle(Request request, CancellationToken cancellationToken)
            {
                Response response = new Response();

                using (var sqlConnection = _sqlConnectionManager.GetConnection())
                {
                    await sqlConnection.OpenAsync();

                    response.{{ entityNamePascalCase }}s = await sqlConnection.QueryAsync<{{ entityNamePascalCase }}ApiModel>(Constants.PROC_{{ entityNameAllCaps }}_GET_ALL, commandType: CommandType.StoredProcedure);

                    sqlConnection.Close();
                }

                return response;                
            }
        }
    }
}