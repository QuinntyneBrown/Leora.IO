using MediatR;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace {{ namespacename }}
{
    [Authorize]
    [Route("api/{{ entityNameCamelCase }}s")]
    public class {{ entityNamePascalCase }}sController : Controller
    {
        private readonly IMediator _mediator;

        public {{ entityNamePascalCase }}sController(IMediator mediator)
        {
            _mediator = mediator;
        }

        [HttpGet]
        [Route("getAll")]
        public async Task<IActionResult> GetAll{{ entityNamePascalCase }}s()
            => Ok(await _mediator.Send(new GetAll{{ entityNamePascalCase }}sQuery.Request()));

        [HttpPost]
        [Route("save")]        
        public async Task<IActionResult> Save([FromBody]Save{{ entityNamePascalCase }}Command.Request request)
        {
            await _mediator.Send(request);
            return Ok();
        }

        [HttpDelete]
        [Route("delete/{{{ entityNameCamelCase }}Id}")]
        public async Task<IActionResult> Save(Delete{{ entityNamePascalCase }}Command.Request request)
        {
            await _mediator.Send(request);
            return Ok();
        }

    }
}
