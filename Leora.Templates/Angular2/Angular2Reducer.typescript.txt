import { Action } from "@ngrx/store";
import { {{ entityNameAllCaps }}_ADD_SUCCESS, {{ entityNameAllCaps }}_GET_SUCCESS, {{ entityNameAllCaps }}_REMOVE_SUCCESS } from "../constants";
import { initialState } from "./initial-state";
import { AppState } from "./app-state";
import { {{ entityNamePascalCase }} } from "../models";
import { addOrUpdate, pluckOut } from "../utilities";

export const {{ entityNameCamelCase }}sReducer = (state: AppState = initialState, action: Action) => {
    switch (action.type) {
        case {{ entityNameAllCaps }}_ADD_SUCCESS:
            var entities: Array<{{ entityNamePascalCase }}> = state.{{ entityNameCamelCase }}s;
            var entity: {{ entityNamePascalCase }} = action.payload;
            addOrUpdate({ items: entities, item: entity});            
            return Object.assign({}, state, { {{ entityNameCamelCase }}s: entities });

        case {{ entityNameAllCaps }}_GET_SUCCESS:
            var entities: Array<{{ entityNamePascalCase }}> = state.{{ entityNameCamelCase }}s;
            var newOrExisting{{ entityNamePascalCase }}s: Array<{{ entityNamePascalCase }}> = action.payload;
            for (let i = 0; i < newOrExisting{{ entityNamePascalCase }}s.length; i++) {
                addOrUpdate({ items: entities, item: newOrExisting{{ entityNamePascalCase }}s[i] });
            }                                    
            return Object.assign({}, state, { {{ entityNameCamelCase }}s: entities });

        case {{ entityNameAllCaps }}_REMOVE_SUCCESS:
            var entities: Array<{{ entityNamePascalCase }}> = state.{{ entityNameCamelCase }}s;
            var id = action.payload;
            pluckOut({ value: id, items: entities });
            return Object.assign({}, state, { {{ entityNameCamelCase }}s: entities });

        default:
            return state;
    }
}

